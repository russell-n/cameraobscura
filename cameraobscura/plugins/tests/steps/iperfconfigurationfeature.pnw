Iperf Configuration
===================

.. literalinclude:: ../features/iperfconfiguration.feature
   :language: gherkin

<<name='imports', echo=False>>=
# third-party
from behave import given, when, then
from hamcrest import assert_that, is_, equal_to, same_instance
from configobj import ConfigObj

# this package
from cameraobscura.commands.iperf.Iperf import IperfEnum
# this plugin
from cameraobscura.plugins.rvrplugin import IperfPluginConfiguration
@

Scenario: Iperf Configuration
-----------------------------

<<name='default_configuration', wrap=False>>=
section = """
[action]
jackson = hole
""".splitlines()

@given("an iperf configuration with no parameters")
def default_configuration(context):
    context.configuration = IperfPluginConfiguration(ConfigObj(section),
                                                     section_name='iperf')
    context.configuration.check_rep()
    return
@

<<name='check_configuration', wrap=False>>=
@when("the iperf configuration is checked")
def check_configuration(context):
    try:
        context.iperf_configuration = context.configuration.configuration
    except KeyError:
        pass
    return
@

<<name='assertions', wrap=False>>=
# this gets called many times
# so make it simpler
def assert_equal(expected, actual):
    assert_that(actual,
                is_(equal_to(expected)),
                "Actual: {0} Expected: {1}".format(actual,
                                                      expected))
    return

def assert_same(expected, actual):
    assert_that(actual,
                is_(same_instance(expected)),
                "Actual: {0} Expected: {1}".format(actual,
                expected))
@

<<name='assert_defaults', wrap=False>>=
@then("the iperf configuration has the defaults")
def assert_defaults(context):
    assert_equal(IperfEnum.default_direction,
                 context.configuration.direction)
    assert_equal(context.configuration.server_settings.prefix,
                 str(context.configuration.server_settings))

    # client settings needs a hostname before being used
    # but that's set later in the code
    # so fake it here
    context.configuration.client_settings.server = 'bob'
    expected = '{0} {1}'.format(context.configuration.client_settings.prefix,
                                'bob')
    assert_equal(context.configuration.client_settings.prefix,
                 str(context.configuration.client_settings))
    return
@

Scenario: Iperf with some settings
----------------------------------

<<name='source', wrap=False>>=
configuration = """
[traffic]
direction = up
parallel = 20
interval = 1
bandwidth = 12K
udp = True
""".splitlines()
@

<<name='some_parameters', wrap=False>>=
@given("an iperf configuration with some parameters")
def some_parameters(context):
    context.configuration = IperfPluginConfiguration(ConfigObj(configuration),
                                                     section_name='traffic')
    context.configuration.check_rep()
    return
@

When the iperf configuration is checked

<<name='assert_iperf_parameters', wrap=False>>=
@then("the configuration has the iperf parameters")
def assert_iperf_parameters(context):
    assert_equal(context.configuration.direction,
                 IperfEnum.upstream)
    assert_equal(context.configuration.configuration['parallel'],
                 20)
    expected = ' --server --udp  --interval 1'
    assert_equal(expected,
                 str(context.configuration.server_settings))

    context.configuration.client_settings.server = 'ted'
    expected = ' --client ted --udp  --bandwidth 12K --parallel 20 --interval 1'
    assert_equal(expected,
                str(context.configuration.client_settings))
    return
@

<<name='iperfconfiguration_check', wrap=False>>=
@then("the IperfConfiguration is ready")
def iperfconfiguration_check(context):
    assert_equal(context.configuration.direction,
                 context.configuration.iperf_configuration.direction)
    assert_same(context.configuration.server_settings,
                context.configuration.iperf_configuration.server_settings)

    assert_same(context.configuration\
                       .client_settings,
                context.configuration\
                       .iperf_configuration\
                       .client_settings)

    return
@
