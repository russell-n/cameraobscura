[attenuation]
# if an option is commented out it has the default setting you see

# 'start' is the attenuation value to use when the testing starts

#start = 0

# 'stop' is the maximum attenuation to try before stopping

#stop = 9223372036854775807

# 'name' is the name of the attenuator
# not case-sensitive, but spelling counts
# valid names : mockattenuator,weinschelp

#name = WeinschelP

# 'control_ip' is the address of the attenuator
control_ip = 192.168.10.53

# 'step_sizes' is a space-separated list of step-sizes
# (each attenuation increases by the current step-size at each repetition)
# in this example, the attenuation will increase by 1 until 10 is reached
# then it will increase by 5 until 100 then it will increase by 10
# until the end of the test

#step_sizes = [1]

# 'step_change_thresholds' is a space-separated list of thresholds which 
# when reached trigger a change to the next 'step-size'
# there should always be one less threshold than step-sizes
# if you don't want to change, comment out or remove the line

#step_change_thresholds =

[dut]
# login information (these are required)
username = admin

# this isn't if your public keys are working
#password = root

# address of the control-interface 
# this is optional if you are using a 'serial' connection
control_ip = 192.168.10.34

# this identifies the type (default: ssh)
#connection_type = telnet

# address of the interface to test
test_ip = 192.168.20.34

# connection time-out in seconds (default: 1)
#timeout=10

# optional prefix to add to ALL commands (default: None)
# this will be added with a space (i.e. <prefix> <command>)
# so if needed, add a semicolon like in the example between the PATH and adb

#prefix = PATH=/opt:$PATH; adb shell

# the operating system for the DUT
# just cygwin and linux initially
# default : linux

# operating_system = cygwin

# there are too many options for the different connection-types
# so you can add necessary parameters but make sure the name
# matcheds the parameter name
# e.g. if you need to set the port:
# port=52686

[server]
# login information (these are required)
username = admin

# this isn't if your public keys are working
#password = root

# address of the control-interface 
# this is optional if you are using a 'serial' connection
control_ip = 192.168.10.34

# this identifies the type (default: ssh)
#connection_type = telnet

# address of the interface to test
test_ip = 192.168.20.34

# connection time-out in seconds (default: 1)
#timeout=10

# optional prefix to add to ALL commands (default: None)
# this will be added with a space (i.e. <prefix> <command>)
# so if needed, add a semicolon like in the example between the PATH and adb

#prefix = PATH=/opt:$PATH; adb shell

# the operating system for the DUT
# just cygwin and linux initially
# default : linux

# operating_system = cygwin

# there are too many options for the different connection-types
# so you can add necessary parameters but make sure the name
# matcheds the parameter name
# e.g. if you need to set the port:
# port=52686

[iperf]
# these are iperf options
# directions can be upstream, downstream or both (default : both)
# actually only checks the first letter so could also be ugly, dumb, or bunny too
direction = upstream

# everything else uses iperf long-option-names
# to get a list use `man iperf`
# the left-hand-side options are the iperf options without --
# for example, to set --parallel:
#parallel = 5

# if the flag takes no options, use True to set
#udp = True

# --client <hostname> and server are set automatically don't put them here
# put all the other settings in, though, and the client vs server stuff will get sorted out

#[ping]
# 'target' (default: None) is the IP address or name to ping (RVR will use the traffic server if not given)
# target = www.google.com

# 'time_limit'  is number of seconds to try to ping before giving up
# time_limit = 300

# 'threshold' is the number of consecutive pings needed for a success
# threshold = 5

# 'arguments' are the arguments to give the ping command
# arguments = -c 1 -W 1

# 'operating_system' is used to chose the arguments for the ping
# operating_system = None

# 'timeout' is the seconds to wait for socket readlines (try to keep above 1 second)
# timeout = 10

# 'data_expression' is the regular expression to extract the round-trip time (used to check success)
# data_expression = None

# 'trap_errors'  if False, will raise an error if there is a socket error
# otherwise it will just log it
#trap_errors = True

#[query]
# these are arbitrary commands that will be called in between attenuations
# it's original use-case is to get RSSI and other monitoring information
# but since it's free-form you can pass in whatever you like

# delimiter separating command and expression
# this is provided so that if the command or expression has a comma in it
# you can use an alternative

#delimiter =  ,

# if you want to specify a filename set the filename option
# filename = query.csv

# to change the readline timeout
# timeout = 10

# to have it crash instead of trap socket errors
# trap_errors = trap_errors

# everything else is of the format:
# <column-header> = <command><delimiter><regular expression>
# the column-header will be used in the csv-file
# the regular expression has to have a group '()' or it will raise an error

#rssi = iwconfig wlan0,Signal\slevel=(-\d+\sdBm)
#noise = wl noise, (.*)
#bitrate = iwconfig wlan0, Bit\sRate=(\d+\.\d\sMb/s)
#counters = wl counters, (rxcrsglitch [0-9]* )

#[dump]
# comment this section out if you don't want a dump

# to change it use the timeout option
# timeout = 5

# for the commands you should use the form:
# <identifier_1> = <command_1>
# <identifier_2> = <command_2>
# ...
# <identifier_n> = <command_n>

# the identifiers can be anything as long as each is unique
# the command should be the actual string you want to send to the device
# as an example for 'dmesg':
# dump = dmesg -k

#[other]
# a sub-folder name to save the output files in
#result_location = output_folder

# identifier for the test 
#test_name = rate_vs_range

# to run the same test multiple times
# repetitions = 1

# there is currently a sleep between directions (up and down)
# use this next setting to change it if it's too long or short
#recovery_time = 10
