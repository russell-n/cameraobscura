Testing the StepIterator
========================

This tests the StepIterator class.

.. currentmodule:: cameraobscura.ratevsrange.tests.teststepiterator
.. autosummary::
   :toctree: api

   TestStepIterator.test_constructor
   TestStepIterator.test_current_value
   TestStepIterator.test_step_threshold
   TestStepIterator.test_update_threshold
   TestStepIterator.test_step_size
   TestStepIterator.test_iterator
   TestStepIterator.test_re_iterator
   TestStepIterator.test_check_rep

<<name='imports', echo=False>>=
# python standard library
import unittest
import random

# third party
from mock import MagicMock

# this package
from cameraobscura.ratevsrange.stepiterator import StepIterator
@
<<name='TestStepIterator', echo=False>>=
class TestStepIterator(unittest.TestCase):
    def setUp(self):
        self.start = random.randrange(12)
        self.stop = self.start + random.randrange(12, 20)
        self.step_sizes = [1, 2]
        self.step_thresholds = [10]
        # the construction
        self.iterator = StepIterator(start=self.start,
                                stop=self.stop,
                                step_sizes=self.step_sizes,
                                step_change_thresholds=self.step_thresholds)        
        return
    
    def test_constructor(self):
        """
        Does it build as expected?
        """
        start = random.randrange(12)
        stop = start + random.randrange(20)
        step_sizes = [1]        

        # the construction
        iterator = StepIterator(start=start, stop=stop, step_sizes=step_sizes)
        
        self.assertEqual(start, iterator.start)
        self.assertEqual(stop, iterator.stop)
        self.assertEqual(step_sizes, iterator.step_sizes)
        self.assertIsNone(iterator.step_change_thresholds)

        # with step_thresholds
        step_thresholds = [2]
        iterator = StepIterator(start=start, stop=stop, step_sizes=step_sizes,
                                step_change_thresholds=step_thresholds)
        self.assertEqual(step_thresholds, iterator.step_change_thresholds)
        return

    def test_current_value(self):
        """
        Is the first current value the same as start?
        """
        self.assertEqual(self.start, self.iterator.current_value)
        return

    def test_step_threshold(self):
        """
        Does the threshold get correctly set?
        """
        # if given step_thresholds, initialize to first value
        self.assertEqual(self.step_thresholds[0], self.iterator.threshold)

        # if step_thresholds not given, does it use stop?
        self.iterator.reset()
        self.iterator.step_change_thresholds = None
        self.assertEqual(self.stop, self.iterator.threshold)
        return

    def test_update_threshold(self):
        """
        Does it update the threshold only when the current value exceeds it?
        """
        # current_value <= threshold
        self.iterator.current_value = 1
        first_threshold, last_threshold = 10, 20
        self.iterator.stop = last_threshold + 10
        self.iterator.step_change_thresholds = [first_threshold, last_threshold]
        threshold = self.iterator.threshold
        self.iterator.update_threshold()
        self.assertEqual(first_threshold, self.iterator.threshold)

        # current_value > threshold and threshold not empty
        self.iterator.current_value = first_threshold + 1
        self.iterator.update_threshold()
        self.assertEqual(last_threshold, self.iterator.threshold)
        
        # current value > threshold and thresholds is empty
        self.iterator.current_value = last_threshold + 1
        self.iterator.update_threshold()
        self.assertEqual(self.iterator.stop, self.iterator.threshold)
        
        ## this case should never be reached, but just in case...
        ## current value > threshold and step_thresholds is None
        self.iterator.reset()
        self.iterator.step_change_thresholds = None
        self.iterator.current_value = self.iterator.stop + 1
        self.iterator.update_threshold()
        self.assertEqual(self.iterator.stop, self.iterator.threshold)
        return

    def test_step_size(self):
        """
        Does it initialize the step-size then change it if the threshold is exceeded?
        """
        # initialize
        print "step_sizes: ", self.iterator.step_sizes
        print "thresholds: ", self.iterator.step_change_thresholds
        print "start: ", self.start
        print "stop", self.stop
        first_size = self.iterator.step_sizes[0]
        self.assertEqual(first_size, self.iterator.step_size,
                         'Expected first step-size {0} Actual: {1}'.format(first_size, self.iterator.step_size))
        # current value exceeds threshold
        self.iterator._current_value = self.iterator.threshold + 1
        actual_size = self.iterator.step_size
        expected_size = self.iterator.step_sizes[self.iterator.current_step_index]
        self.assertNotEqual(first_size, expected_size, "Expected")
        self.assertEqual(expected_size, actual_size,
                         "Expected: {0}, Actual: {1}".format(expected_size,
                                                             self.iterator.step_size))
        # special case
        # this was crashing but is now fixed
        # but I leave it in in case the bug gets re-introduced
        iterator = StepIterator(start=2, stop=11, step_sizes=[1,2], step_change_thresholds=[10])
        first_size = iterator.step_sizes[0]
        self.assertEqual(first_size, iterator.step_size)
        # current value exceeds threshold
        iterator._current_value = iterator.threshold + 1
        current_size = iterator.step_size
        expected_size = iterator.step_sizes[iterator.current_step_index]
        self.assertNotEqual(first_size, expected_size)
        self.assertEqual(expected_size, iterator.step_size,
                         "Expected: {0}, Actual: {1}".format(expected_size,
                                                             iterator.step_size))
        
        return

    def test_iterator(self):
        """
        Does it traverse the values in the way we expect?
        """
        # simplest case -- no step-size-change
        self.iterator.start = 0
        self.iterator.stop = 10
        self.iterator.step_sizes = [1]
        self.iterator.step_change_thresholds = None

        # include last point
        expected = range(11)
        actual = [item for item in self.iterator]
        self.assertEqual(expected, actual)
        
        # two step-sizes
        self.iterator.reset()
        self.iterator.step_sizes = [1, 2]
        self.iterator.step_change_thresholds = [5]
        expected = [int(item) for item in '0 1 2 3 4 5 7 9'.split()]
        actual = [item for item in self.iterator]
        self.assertEqual(expected, actual)
        return

    def test_re_iterator(self):
        """
        Is the re-iterator re-useable?
        """
        self.iterator.start = 0
        self.iterator.stop = 10
        self.iterator.step_sizes = [1, 2]
        self.iterator.step_change_thresholds = [5]
        expected = [int(item) for item in '0 1 2 3 4 5 7 9'.split()]
        actual = [item for item in self.iterator]
        self.assertEqual(expected, actual)

        self.iterator.reset()
        actual = [item for item in self.iterator]
        self.assertEqual(expected, actual)

        return

    def test_check_rep(self):
        """
        Does it raise assertion errors when mis-configured?
        """
        # is stop > start?
        self.iterator.stop = self.iterator.start - 1
        with self.assertRaises(AssertionError):
            self.iterator.check_rep()

        # fix the stop < start problem
        self.iterator.stop = self.iterator.start + 1
        self.iterator.check_rep()
            
        # is there one more threshold than steps?        
        self.iterator.step_sizes = range(3)
        self.iterator.step_change_thresholds = range(3)
        with self.assertRaises(AssertionError):
            self.iterator.check_rep()

        # what if step_thresholds isn't set?
        self.iterator.step_change_thresholds = None
        self.iterator.check_rep()
        return
@

