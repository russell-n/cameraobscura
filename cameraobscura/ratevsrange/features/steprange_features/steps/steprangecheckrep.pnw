StepRange CheckRep
==================

.. literalinclude:: ../steprangecheckrep.feature
   :language: gherkin

<<name='imports', echo=False>>=
# third-party
from behave import given, when, then
from hamcrest import assert_that, calling, raises

# this package
from cameraobscura.ratevsrange.stepiterator import StepRange
from cameraobscura import CameraobscuraError
@

Scenario: User calls check rep
------------------------------

Example: valid step-range
~~~~~~~~~~~~~~~~~~~~~~~~~

<<name='valid_step_range', wrap=False>>=
@given("a StepRange with 1 more step size than step change threshold")
def valid_step_range(context):
    context.steprange = StepRange()
    return
@

<<name='call_check_rep', wrap=False>>=
@when("The user calls StepRange.check_rep")
def call_check_rep(context):
    context.check_rep = context.steprange.check_rep
    return
@

<<name='no_error', wrap=False>>=
@then("No Error is raised")
def no_error(context):
    context.check_rep()
    return
@

Example: Invalid counts
~~~~~~~~~~~~~~~~~~~~~~~

<<name='invalid_step_range', wrap=False>>=
@given("a StepRange with not 1 more step size than step change threshold")
def valid_step_range(context):
    context.steprange = StepRange(step_sizes=[1],
                                  step_change_thresholds=[10],
                                  stop=20)
    return
@


<<name='assert_error', wrap=False>>=
@then("CameraObscuraError is raised")
def assert_error(context):
    assert_that(calling(context.check_rep),
                raises(CameraobscuraError))
    return
@

Example: Invalid count but out of range
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<<name='invalid_count_valid_step_range', wrap=False>>=
@given("a StepRange with out of range but not 1 more step size than step change threshold")
def valid_step_range(context):
    context.steprange = StepRange(step_sizes=[1],
                                  step_change_thresholds=[100, 200],
                                  stop=10)
    return
@
