The Finder
==========

.. currentmodule:: iperflexer.finder

A set of functions to generate filenames, lines in files, lines in sub-sections of files, or count of lines that match an expression for each subsection within files.

<<name='imports', echo=False>>=
# python libraries
import fnmatch
import os
import re
@
<<name='constants', echo=False>>=
WRITEABLE = 'w'
EOSection = ''
@

Find
----

The `find` takes a glob and finds all matching files.

.. note:: The `find` is recursive so it will match files in sub-folders as well.

.. autosummary:: 
   :toctree: api

   find

<<name='find', echo=False>>=
def find(glob, start=None):
    """
    Generates files matching the glob
    
    :param:

     - `glob`: A file-glob to match interesting files.
     - `start`: The top path (finds files below the top)

    :yield: Matching file name
    """
    if start is None:
        start = os.getcwd()
    for path, dir_list, file_list in os.walk(start):
        for name in fnmatch.filter(file_list, glob):
            yield os.path.join(path, name)
    return
@

Example Use::

    for name in find("*.iperf"):
        print(name)

Concatenate
-----------

The `concatenate` generates all lines from files that match the given glob. It uses the `find` function so it is recursive.

.. autosummary::
   :toctree: api

   concatenate

Example Use::

    for line in concatenate('*csv'):
        process(line)

.. note:: the idea behind the ``concatenate`` is that it allows you to process files that can be grouped by glob, e.g. all files that have `cisco_1250` in their name        

<<name='concatenate', echo=False>>=
def concatenate(glob, start=None):
    """
    Generates lines from all files that match the glob.
    
    :param:

     - `glob`: A file-glob to match interesting files.
     - `start`: The top path (finds files below the top)

    :yield: lines in matching files.
    """
    for name in find(glob, start):
        for line in open(name):
            yield line
    return
@

Sections
--------

.. autosummary::
   :toctree: api

   sections

The ``sections`` generator traverses lines from files matching the globs, yielding a generator of lines every time the regular-expression represting the start of the section is matched.

<<name='sections', echo=False>>=
def sections(glob, start, end, top=None):
    """
    Generates section generators
    
    :param:

     - `glob`: A file glob that matches source files
     - `start`: A regular expression to match the start of a section.
     - `end`: A regular expression to match the end of a section.
     - `top`: The starting path to search for files

    :yield: section generator of lines
    """
    start, end = re.compile(start), re.compile(end)
    concatenator = concatenate(glob, top)
    for line in concatenator:
        if start.search(line):
            yield section(concatenator, end, line)
    return
@

Section Generator
-----------------

The `section` generator generates a subset of lines from an iterator, stopping when a line matches the regular expression representing an end-of-section line.

<<name='section', echo=False>>=
def section(iterator, end, firstline=None):
    """
    Generates lines from the iterator until `end` is matched or iterator stops
    
    :param:

     - `iterator`: An iterator of lines
     - `end`: A regular expression to match the last line in the section

    :yield: lines up to and including the end match
    """
    ended = False
    if firstline is not None:
        yield firstline
    # uses next instead of iterator so it doesn't consume the last line
    while not ended:
        try:
            line = iterator.next()
            if end.search(line):
                ended = True
            yield line
        except StopIteration:
            return
@

Line Counter
------------

Traverses a sections within lines, yielding the count of lines that match the `interesting` regular expression for each section.

<<name='line_counter', echo=False>>=
def line_counter(glob, start, end, interesting):
    """
    Counts interesting lines within sections

    :param:

     - `glob`: the glob for the source files.
     - `start`: regular expression that defines the start of a section
     - `end`: end of section regular expression
     - `interesting`: interesting line regular expression

    :yield: count of interesting lines in each section
    """
    start, end, interesting = re.compile(start), re.compile(end), re.compile(interesting)
    for section in sections(glob, start, end):
        counter = 0
        for line in section:
            if interesting.search(line):
                counter += 1
        yield counter
@
