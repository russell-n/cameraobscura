Iperf Configuration
-------------------

<<name='imports', echo=False>>=
# python standard library
import subprocess

# this folder
from helpers import print_sample
@

The ``iperf`` section is where you set the iperf settings.

<<name='other_section', echo=False>>=
output = print_sample('other')
@

``direction``
~~~~~~~~~~~~~

This is the only non-iperf flag. It looks at the first letter of the setting and decides which direction to send traffic. This assumes that traffic is alternating and is oriented to the device sitting in the chamber (called `dut` here).

.. csv-table:: Iperf Directions
   :header: First Letter, Full Name, Meaning

   u, upstream, Traffic is sent from the DUT to the traffic server (simulated upload)
   d, downstream, Traffic is sent to the DUT from the traffic server (simulated download)
   b, both, Traffic alternates between upstream and downstream

So, to run testing only from the DUT to the traffic server::

    direction = up

To run direction only from the traffic server to the DUT::

    directly = down    

Client and Server
~~~~~~~~~~~~~~~~~

Although there are iperf options to determine the direction of the traffic (``-c, --client`` and ``-s, server``) these are set within the program based on the ``direction`` setting and the IP addresses taken from the ``server`` and ``dut`` sections so you shouldn't try and set them (it should crash the program).

.. '

Everything Else
~~~~~~~~~~~~~~~

All the other settings are taken form the long option-names used by iperf::

    iperf -h

<<name='iperf_options', echo=False, wrap=False>>=
p = subprocess.Popen('iperf -h'.split(), stderr=subprocess.PIPE)
stdout, stderr = p.communicate()
for line in stderr.split('\n'):
    print line
@

So, for instance, to set it to run upstream and downstream with 6 parallel threads for 5 minutes, with values output at 1 second intervals and a TCP window-size of 256K you would use::

   [iperf]
   direction = both

   parallel = 6
   interval = 1
   time = 300
   window = 256K

For flags that don't take values (e.g. ``--udp``) set use 'true' as the value::

    udp = true

.. '
    
Special Considerations
~~~~~~~~~~~~~~~~~~~~~~

Here are some miscellaneous things I thought of while re-doing this code.

   * If you use a serial connection (via telnet) the code isn't currently breaking the server-side connection, so if you want TCP you should set the ``--daemon`` flag
   * If you set the ``--daemon`` flag, you won't  get the server-side output so you can get the server's final response (via the client output) but not second by second output
   * The iperf-parser in here is pretty fragile, I crashed it pretty easily, but the raw-iperf files are there in the data folder
   * Iperf seems to have arbitrarily truncated some words -- they use `window` but shortened `length` to `len`... make sure to check what they should be

   
