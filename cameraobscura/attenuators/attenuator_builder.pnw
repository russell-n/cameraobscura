The Attenuator Builder
======================

Contents:

   * :ref:`is_attenuator <attenuators-annenuator-factory-is-attenuator>`
   * :ref:`get_definitions <attenuators-attenuator-factory-get-definitions>`

<<name='imports', echo=False>>=
# python standard library
import os
import importlib
import inspect

# this package
from cameraobscura import CameraobscuraError
from attenuator import Attenuator
@

.. _attenuators-annenuator-factory-is-attenuator:

The `is_attenuator` Function
----------------------------

This function will be passed into the `inspect.getmembers` function. It returns ``True`` whenever the object passed to it is a sub-class of the ``Attenuator`` class. It first checks that the object is a class definition to make sure that it has a `__base__` attribute. I suppose it could also do a hasattr call, but this function came about as part of some empirical testing so there were prior reasons that I can't remember any more as to why I did it this way.

.. '

.. currentmodule:: cameraobscura.attenuators.attenuator_builder
.. autosummary::
   :toctree: api

   is_attenuator

<<name='is_attenuator', echo=False>>=
def is_attenuator(instance):
    """
    A function to see if the imported module item is a sub-class of Attenuator

    :param:

     - `instance`: an object to check

    :return: True if instance sub-classes `Attenuator`, False otherwise
    """
    # the 'inspect.isclass(instance)' call is there so that if there's
    # stuff in the modules that lack a `__base__` attribute it won't
    # raise an AttributeError
    return (inspect.isclass(instance) and instance.__base__ is Attenuator)
@

.. _attenuators-attenuator-factory-get-definitions:

Get Definitions
---------------

This is a function to build the dictionary of <name>:<class definition> pairs. It has a small hack in it that checks that the ``__name__`` variable doesn't contain '__builtin__' because Pweave doesn't create that variable. Unfortunately that means that I can't print out what it discovers in this documentation. The discovered identifiers are being displayed in the sample configuration file, though, so entering::

    rvr fetch --section attenuation

will dump a sample configuration file with the list of the dictionary's keys in the comments for the `name` option in the configuration file.

.. autosummary::
   :toctree: api

   get_definitions


.. figure:: figures/get_definitions_activity_diagram.svg
   :align: center

   `get_definitions` Activity Diagram
   
<<name='directory', echo=False>>=
def get_definitions():
    """
    Imports class definitions for `Attenuator` sub-classes

    :return: dict of (name (lower-cased): class definition object)
    """
    definitions = {}
    if __name__ == '__builtin__':
        return definitions

    # directory is the path to this directory
    directory = os.path.dirname(__file__)
    
    # filenames is a generator of python files in this directory
    filenames  = (name for name in os.listdir(directory) if name.endswith('.pyc'))
    #basenames_extensions is a generator of (basename, ext) tuples for the python files
    # so basename is the filename without '.py' (and no path either)
    basenames_extensions = (os.path.splitext(name) for name in filenames)

    # modules is a generator of modules represented by the python files
    # `__package__` is 'cameraobscura.attenuators'
    modules =  (importlib.import_module('.'.join((__package__, base)))
                for base, extension in basenames_extensions)

    for module in modules:
        members = inspect.getmembers(module, predicate=is_attenuator)
        # members is a list of all Attenuator sub-classes in the module
        # so it could possibly have more than one member
        for member in members:
            name, definition = member
            # the AdeptNCustomPath is returning an incorrect name for some reason
            # so the __name__ variable is used instead of the returned 'name'
            definitions[definition.__name__.lower()] = definition
    return definitions
# end get_definitions
@

.. _attenuators-attenuator-factory-class:

The AttenuatorBuilder Class
---------------------------

.. currentmodule:: cameraobscura.attenuators.attenuator_builder
.. autosummary::
   :toctree: api

   AttenuatorBuilder
   AttenuatorBuilder.get_attenuator

<<name='AttenuatorBuilder', echo=False>>=
class AttenuatorBuilder(object):
    """
    Builds attenuator objects
    """
    _attenuators = {}
    definitions = get_definitions()
    
    @classmethod
    def GetAttenuator(cls, attenuator_type, ip_address):
        """
        Check what *type* of attenuator is needed and return an instance
        of that type. Use the collection of already created instances
        to avoid duplication.
        
        :param:
         - `attenuator_type`: Name of class to control attenuator, e.g. "MockAttenuator"
         - `ip_address`: attenuator's IP or hostname

        :return: Attenuator object
        :raise: CameraObscura error if the `attenuator_type` is unknown
        """        
        type_lower = attenuator_type.lower()
        check = (type_lower, ip_address)

        if check not in AttenuatorBuilder._attenuators:
            try:
                new_attenuator = cls.definitions[type_lower](ip_address)
            except KeyError as error:
                print(error)
                raise CameraobscuraError("'{0}' attenuator not implemented (or mis-named)".format(attenuator_type))
            AttenuatorBuilder._attenuators[check] = new_attenuator
        return AttenuatorBuilder._attenuators[check]
# end AttenuatorBuilder
@

The ``AttenuatorFactory`` imports any class defined in the same directory that it's in if the class is a sub-class of the :ref:Attenuator <attenuators-attenuator-base-class>` base-class. The `GetAttenuator` method is its only method. The `GetAttenuator` method is a class method that maintains a class variable `._attenuators` that is a dictionary of <name>:<Attenuator sub-class instance>.  Note that they are class-attributes, not instance attributes so it's essentially behaving like a module -- you don't need to instantiate it (it doesn't have a constructor defined). A side-effect of this is it has no logging.

.. warning:: This appears to create singletons (for every IP address) so if more than one class uses this they should be aware that they're sharing the same object.

.. '

.. .. csv-table:: Known Attenuators
..   :header: Identifier, Class Name

.. <<name='constants', echo=False, results='sphinx'>>=
.. # backwards compatibility        
.. #KNOWN_ATTENUATORS = ATTENUATORS.keys()
.. #KNOWN_IMPLEMENTATIONS = (AdeptN, AdeptNCustomPath, MockAdeptN, WeinschelP, MockAttenuator)
.. #KNOWN_ATTENUATORS = (implementation.__name__.lower() for implementation in KNOWN_IMPLEMENTATIONS)
.. #ATTENUATORS = dict(zip(KNOWN_ATTENUATORS, KNOWN_IMPLEMENTATIONS))
.. if __name__ == '__builtin__':
..     for name, definition in ATTENUATORS.iteritems():
..         print "   {0},{1}".format(name, definition.__name__)
.. @
